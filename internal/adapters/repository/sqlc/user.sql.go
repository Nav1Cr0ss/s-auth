// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package repository

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (phone, email, hashed_password)
VALUES ($1, $2, $3)
RETURNING "id"
`

type CreateUserParams struct {
	Phone          string
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Phone, arg.Email, arg.HashedPassword)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getAccountByLogin = `-- name: GetAccountByLogin :one
SELECT id, created_at, email, phone, hashed_password
FROM "user"
WHERE phone = $1 or email = $1
LIMIT 1
`

func (q *Queries) GetAccountByLogin(ctx context.Context, phone string) (User, error) {
	row := q.db.QueryRowContext(ctx, getAccountByLogin, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, email, phone, hashed_password
FROM "user"
WHERE "id" = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Email,
		&i.Phone,
		&i.HashedPassword,
	)
	return i, err
}
